                                            dbframework
                                            
dbframework - это библиотека шаблонов для использования в приложениях, осуществляющих взаимодействие
с реляционными БД. Библиотека предназначена для структурирования приложения с целью отделения уровня
доступа к БД с помощью SQL-запросов от более высоких уровней. Структурирование достигается путем 
наследования от шаблонных классов библиотеки.

                                     Мотивация создания библиотеки
                                     
В приложениях, использующих для хранения данных БД, для доступа к БД часто используются библиотеки,
оперирующие с наборами данных (dataset) формируемыми на основе SQL-запросов, например, QSqlQuery в qt,
TQuery в VCL. Чтобы обеспечить отделение модуля программы, работающего с БД, от остальных модулей, 
возникает задача перенести данные
из набора данных в какой-то класс, используемый другими модулями. При этом модуль, работающий с БД,
должен иметь возможность сохранять данные из классов других модулей в БД. Для автоматизации типовых 
задач, возникающих при разработке такого промежуточного уровня между модулем работы с БД и основной 
частью программы, и была создана библиотека.

                                        Архитектура библиотеки.

Основные элементы, с которыми оперирует библиотека - это "объект", "оболочка объекта", "набор данных",
 и "оболочка набора данных".

"Объект" (далее О) - это просто какой-то класс, используемый в программе, отражающий данные некоей 
сущности, который необходимо сохранять в БД. Предпологается что O хранится в БД в виде записи в таблице.
О может иметь вложенные О. Предполагается что они хранятся в виде записей в других таблицах. Таким
образом, каждому О соответствует своя таблица, каждому экземпляру О - своя запись в таблице.

Особых ограничений на О не накладывается - он должен иметь конструктор по умолчанию и оператор присваивания.
Кроме того, О должен иметь ключевое поле или комбинацию полей, позволяющих отличить один экземпляр О
от другого. Данное требование естественно для классов, которые предполагается сохранять в БД. dbframework
просто оперирует с О, создание О является прерогативой программы. В dbаramework О используется как
параметр шаблона.

"Набор данных" (далее НД) - это класс, реализующий чтение данных из БД с помощью SQL-запросов или 
вызова хранимых процедур, использующий представление считанных данных в виде контейнера записей с 
последователбным доступом. К примеру, QSqlQuery в qt, TQuery в VCL. В dbframework НД фигурирует в 
качестве параметра шаблонов.

"Оболочка объекта" (далее ОО) - вспомогательный класс, создаваемый для каждого О. Содержит:
- методы, описывающие структуры таблицы для хранения О, могут быть использованы для генерации SQL-запросов;
- метод, позволяющий связать параметры запроса с полями О;
- метод, позволяющий считать из текущей записи НД поля О (за исключением вложенных объектов, их чтение
осуществляется с помощью метода их ОО).

dbframework содержит базовый класс для ОО, создаваемые ОО должны наследоваться от него.

"Оболочка набора данных" (далее ОНД) - вспомогательный класс, осуществляющий считывание из НД. НД может
быть создан на базе SQL-запроса, осуществляющего соединение таблиц. В таком случае может потребоваться 
распределение данных каждой записи на несколько О, хранящихся в контейнерах, при этом некоторые 
контейнеры могут быть вложены в О. 

Расмотрим пример. Пусть в БД есть таблица клиентов Client и таблица заказов со сслыкой на клиента Order.
Отношение между таблицами один ко многим, т.е. каждый клиент может иметь несколько заказов. В программе
классы, описывающие клиента и заказ могут иметь вид:

class COrder {
...
};
class CClient {
...
//контейнер объектов типа COrder, содержащий заказы клиента
Container<COrder> orders;
};

Стоит задача заполнить  данными клиентов и их заказов контейнер
Container<CClient> clients;

Данные можно получить с помощью запроса 
select * from Client, Order where Client.id = Order.Reference_to_Client

Для решения задачи при чтении каждой записи НД, сформированного по приведенному выше запросу 
нужно проделать следующие действия:
- проверить, есть ли уже в clients такой клиент, если нет добавить;
- проверить, ести ли у нужного элемента clients заказ из текущей записи в поле orders, если нет -
  добавить.

Эти действия в dbframework реализуются с помощью ОНД. dbframework содержит несколько базовых шаблонов 
классов, упрощающих реализацию ОНД.  

                                  Использование dbframework

Ниже приводится последовательность действий при разработке программе с использованием dbframework.
1. Выбираем НД, который будет использоваться. Можно использовать несколько НД, например один для 
SQL-запросов, другой - для хранимых процедур. Или, к примеру, свой специфический НД для доступа к разным
СУБД. В дальнейшем НД будет использоваться как параметр, передаваемый в шаблон класса. 
2. Создаем класс, реализующий наполнение данными экземпляра НД на основе SQL-запроса select (вызова
хранимой процедуры) c использованием абстрактного предка всех OO из dbframework для задания параметров
SQL-запроса. Создаем метод, реализующий выполнение DML-запросов с помощью НД c использованием абстрактного
предка всех OO из dbframework для задания параметров SQL-запроса. Часто эти два метода можно объединить 
в одном.
3. Определяем список О, которые будут храниться в БД.
4. Для каждого О из списка, составленного в п.3, создаем ОО путем наследования абстрактного предка всех OO 
из dbframework.
5. Разрабатываем методы для взаимодействия с БД. 
5.1. Для записи О в БД используем класс из п.2 и ОО из п.4, при этом можно воспользоваться вспомогательным
классом для генерации DML-запросов из dbframework.
5.2. Для чтения данных из БД используем класс из п. 2 и ОНД, созданный для данного SQL-запроса. Точнее говоря,
ОНД нужно создавать не для каждого запроса, а для группы запросов, осуществляющих соединение одного и того же
набора таблиц. В простых случаях (запрос из одной таблицы, соединение таблиц в отношении один к одному) можно
непосредственно воспользоваться шаблонами ОНД из dbframework. Соединение таблиц один ко многим потребует 
наследования от базового класса из dbframework.

В дальнейшем при появлении новых таблиц в БД, и соответственно новых О,

                                     Установка библиотеки

Для использования библиотеки требуется компилятор C++ 11 и библиотека STL.

Скопируйте каталог dbframework на диск. В свойствах проекта добавьте созданный каталог к путям для поиска 
заголовочных файлов. Для использования dbframework необходимо включить файл dbframework.h с помощью директивы
#include.


 

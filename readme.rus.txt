Введение
========

dbframework - это небольшой фреймворк для C++, предназначенный для реализации объектно-реляционного отображения (object-relational mapping, ORM) в приложениях, взаимодействующих с реляционными СУБД. В отличии от многих реализаций ORM, dbframework не реализует автоматическое создание таблиц БД. Основная функция данного фреймворка - упростить написание кода для считывания результатов выполнения запросов, осуществляющих соединение (join) нескольких таблиц, в сложные иерархические структуры объектов. Под сложной иерархической структурой понимается класс, который включает в себя контейнеры, содержащие объекты других классов, которые в свою очередь содержат контейнеры объектов и т.д.

Особенности dbframework
=======================

1. dbframework реализован в виде шаблонов классов C++. Использование dbframework осуществляется с помощью  использования или наследования от шаблонов классов dbframework. Как следствие, не требуются дополнительные препроцессоры, компиляторы и т.п. 
2. Не требуется модификация уже существующих классов. 
3. dbframework не содержит код для работы с какой-то конкретной СУБД. Предполагается, что для выполнения запросов к БД будет использоваться сторонняя библиотека.

Установка
=========

Для установки достаточно распаковать архив dbframework в некоторый каталог. 

Использование
=============

Для использования dbframework в своем приложении необходимо:
- включить файл dbframework.h;
- добавить каталог установки dbframework в перечень путей для поиска включаемых файлов.

Все классы фреймворка находятся в пространстве имен dbframework.

Пример использования dbframework находится в подкаталоге example каталога установки dbframework.

Краткое описание
================

dbframework предназначен для организации взаимодействия между основной частью программы и частью, ответственной за взаимодействие с реляционной БД. Класс из основной части программы, данные которго сохраняются в некоторой таблице БД, будем называть простым. Комплексным классом будем называть класс, содержащий контейнер простых или комплексных классов или являющийся таковым контейнером. Комплексные классы могут использоваться для записи в них результатов выполнения SQL запросов, осуществляющих соединение нескольких таблиц.

dbframework содержит две основные иерархии шаблонов классов: 
- классы для чтения результатов выполнения SQL запроса, базовый шаблон класса - dbframework::DBReader; 
- классы для передачи параметров в SQL запрос, базовый шаблон класса - dbframework::DBBinder.
В дальнейшем потомков dbframework::DBReader будем называть Reader, а потомков dbframework::DBBinder - Binder.

Reader-ы используются следующим образом. Перед считыванием записи из результатов выполнения SQL запроса экземпляр Reader-а связывается c экземпляром простого или комплексного класса. Затем вызывается метод read(...). Данный метод должен быть реализован так, чтобы осуществлять считывание данных из записи в связанный объект. В результате повторения этой процедуры для всех записей осуществляется считывание результатов SQL запроса.

Binder-ы используются следующим образом. Перед выполнением запроса экземпляр Binder-а связывается с экземпляром некоторого класса или переменной встроенного типа (например, int). Для случаев, когда параметры содержатся в нескольких переменных или объектах, dbframework содержит Binder, позволяющий объединить несколько Binder-ов в один. Далее вызывается метод bind(...) Binder-а, который должен присвоить значения полей объекта или переменной соответствующим параметрам запроса. После этого запрос может быть выполнен.

Реализацию объектно-реляционного отображения с помощью dbframework можно разделить на четыре этапа.

1. Создание подпрограммы, осуществляющей управление всем процессом выполнения SQL запроса. Данная подпрограмма должна принимать в качестве параметров SQL запрос, Binder и Reader. Подпрограмма должна задать параметры SQL запроса вызовом Binder.bind(...), выполнить SQL запрос и для каждой записи результата выполнения SQL запроса вызвать Reader.read(...). В дальнейшем выполнение любого SQL запроса может быть реализовано данной подпрограммой при задании подходящих binder-а и Reader-а.
2. Для каждого простого класса создать соответствующий класс Binder-а, осуществляющий связывание полей класса с параметрами SQL запроса. Проще всего это реализовать с помощью наследования от шаблона класса dbframework::DBBindObject. Этот этап опционален. Если не предполагается выполнение SQL запросов с большим числом параметров, связываемых с полями некоторого объекта, то можно ограничиться использованием шаблонов классов dbframework::DBBind и dbframework::DBBinders.  
3. Для каждого простого класса создать соответствующий класс Reader-а, осуществлюющий считывание данных из записи в поля простого класса. Это можно  реализовать путем наследования от шаблона класса dbframework::DBReader2Object.
4. Для каждого SQL запроса, который необходимо выполнить, следует выбрать комплексный класс, который будет использоваться для хранения результатов выполнения SQL запроса. Для выбранного комплексного класса нужно создать класс Reader-а. Для этого можно воспользоваться Reader-ами простых классов и шаблонами Reader-ов dbframework, предназначенными для считывания данных в контейнеры.

Таким образом, выполнение SQL запросов сводится к созданию подходящих Reader-ов и Binder-ов.

В подкаталоге example каталога установки dbframework находится пример программы с использованием dbframework. 

Документацию dbframework можно сгенерировать обработав заголовочные файлы утилитой doxygen. Достаточно запустить doxygen из каталога установки dbframework.